#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import random
import os
from person_data import MyData

"""
Created on Thu Oct 19 16:00:00 2023
Author: Nicholas Dornyo

A small command-line tool that asks the user some personal details and then displays a customized summary.

The program prompts the user for the following information:
- Their name
- Age
- Favorite color
- Favorite food
- City they live in
- SHS (Senior High School) attended
- Favourite soccer team
- Additional personal preferences

After collecting all the information, it displays a personalized summary of the user's details.
The user can optionally save the summary to a text file and rate the assistant.
"""

def get_user_rating():
    """Get user rating for the assistant (1-5 stars)"""
    while True:
        try:
            rating = int(input("\nPlease rate this assistant (1-5 stars): "))
            if 1 <= rating <= 5:
                return rating
            else:
                print("Please enter a number between 1 and 5.")
        except ValueError:
            print("Please enter a valid number.")

def save_to_file(person_obj, rating):
    """Save the person's summary and rating to a text file"""
    # Create filename based on person's name (remove spaces and special characters)
    filename = f"{''.join(c for c in person_obj.name if c.isalnum() or c in (' ', '-', '_')).strip().replace(' ', '_')}.txt"
    
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            file.write("=" * 50 + "\n")
            file.write("PERSONAL DETAILS SUMMARY\n")
            file.write("=" * 50 + "\n\n")
            file.write(person_obj.summary())
            file.write("\n\n" + "-" * 30 + "\n")
            file.write(f"Assistant Rating: {'⭐' * rating} ({rating}/5)\n")
            file.write("-" * 30 + "\n")
            file.write(f"Generated by: Personal Details CLI\n")
            file.write(f"Date: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        print(f"✅ Summary saved successfully to '{filename}'!")
        return True
    except Exception as e:
        print(f"❌ Error saving file: {e}")
        return False

def ask_yes_no(question):
    """Helper function to ask yes/no questions"""
    while True:
        answer = input(f"{question} (y/n): ").lower().strip()
        if answer in ['y', 'yes']:
            return True
        elif answer in ['n', 'no']:
            return False
        else:
            print("Please enter 'y' for yes or 'n' for no.")

def run_cli():
    """Main CLI function"""
    print("🌟 Welcome to the Personal Details CLI! 🌟")
    
    # Define questions with their corresponding attribute names
    questions = [
        ("name", "What is your name? "),
        ("age", "How old are you? "),
        ("color", "What is your favorite color? "),
        ("food", "What is your favorite food? "),
        ("city", "Which city do you live in? "),
        ("shs", "Which Senior High School did you attend? "),
        ("soccer_team", "What is your favorite soccer team? "),
        ("hobbies", "What are some of your hobbies? "),
        ("dream_job", "What is your dream job? ")
    ]
    
    # Shuffle the questions randomly
    random.shuffle(questions)
    
    # Collect user information in random order
    user_data = {}
    print("\n📝 Please answer the following questions:\n")
    
    for i, (attribute, question) in enumerate(questions, 1):
        user_data[attribute] = input(f"{i}. {question}")
    
    # Create MyData object with collected information
    person = MyData(
        name=user_data["name"],
        age=user_data["age"],
        color=user_data["color"],
        food=user_data["food"],
        city=user_data["city"],
        shs=user_data["shs"],
        soccer_team=user_data["soccer_team"],
        hobbies=user_data["hobbies"],
        dream_job=user_data["dream_job"]
    )
    
    # Display greeting first, then detailed summary
    print("\n" + "=" * 60)
    print(person.greeting())
    print("=" * 60)
    print("\n📋 Here are your complete details:")
    print("-" * 50)
    print(person.summary())
    print("-" * 50)
    
    # Get user rating
    rating = get_user_rating()
    print(f"Thank you for rating us {'⭐' * rating} ({rating}/5)!")
    
    # Ask if user wants to save to file
    if ask_yes_no("\n💾 Would you like to save this summary to a text file?"):
        save_to_file(person, rating)
    
    # Ask if user wants to restart
    if ask_yes_no("\n🔄 Would you like to create another profile?"):
        print("\n" + "🔄" * 20 + " RESTARTING " + "🔄" * 20 + "\n")
        run_cli()  # Recursive call to restart
    else:
        print("\n👋 Thank you for using Personal Details CLI! Goodbye!")

# Run the main program
if __name__ == "__main__":
    run_cli()